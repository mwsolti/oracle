
- DADOS DA INSTÂNCIA;
set lines 160
col HOST_NAME for a60
select INSTANCE_NAME,STARTUP_TIME,STATUS,VERSION,HOST_NAME from v$instance;

- VERSÕES DE PRODUTOS INSTALADOS;
select banner from v$version;

- CONFIGUAÇÕES DE NLS DA INSTÂNCIA;
Col value$ for a60
Set pages 2000
SELECT name,value$ FROM sys.props$;

- INFORMAÇÕES SOBRE OS CONTROLFILES;
Col name for a30
select * from v$controlfile;

- INFORMAÇÕES SOBRE REDOLOGS;
Select * from v$log;
- INFORMAÇÕES SOBRE TABLESPACES;
set lines 158
set pages 100
column "Tablespace" format A25
column "Usado" format '999,990.00'
column "Livre" format '999,990.00'
column "Expansivel" format A12
column "Total" format '999,990.00'
column "Usado %" format '990.00'
column "Livre %" format '990.00'
column "Tipo Ger." format A12

select t.tablespace_name "Tablespace", round(ar.usado, 2) "Usado", round(decode(NVL2(cresc.tablespace, 0, sign(ar.Expansivel)),1,
                    (ar.livre + ar.expansivel), ar.livre), 2) "Livre", round(ar.alocado,2) "Alocado Mb",
                   NVL2(cresc.limite, 'ILIMITADO', round(ar.expansivel, 2)) "Expansivel",
                   round(decode(NVL2(cresc.tablespace, 0, sign(ar.Expansivel)), 1, ar.usado / (ar.total + ar.expansivel),
                    (ar.usado / ar.total)) * 100, 2) "Usado %", round(decode(NVL2(cresc.tablespace, 0, sign(ar.Expansivel)), 1,
                    (ar.livre + ar.expansivel) / (ar.total + ar.expansivel),
                    (ar.livre / ar.total)) * 100, 2) "Livre %", round(decode(NVL2(cresc.tablespace, 0, sign(ar.Expansivel)), 1,
                    (ar.total + ar.expansivel), ar.total), 2) "Total", t.Contents "Conteudo", t.Extent_Management "Tipo Ger."
       from dba_tablespaces t, (select df.tablespace_name tablespace,
               sum(nvl(df.user_bytes,0))/1024/1024 Alocado, (sum(df.bytes) - sum(NVL(df_fs.bytes, 0))) / 1024 / 1024 Usado,
               sum(NVL(df_fs.bytes, 0)) / 1024 / 1024 Livre,
               sum(decode(df.autoextensible, 'YES', decode(sign(df.maxbytes - df.bytes), 1, df.maxbytes - df.bytes, 0),
                          0)) / 1024 / 1024 Expansivel, sum(df.bytes) / 1024 / 1024 Total
       from dba_data_files df, (select tablespace_name, file_id, sum(bytes) bytes
                  from dba_free_space group by tablespace_name, file_id) df_fs
         where df.tablespace_name = df_fs.tablespace_name(+) and df.file_id = df_fs.file_id(+)
         group by df.tablespace_name
        union
        select tf.tablespace_name tablespace, sum(nvl(tf.user_bytes,0))/1024/1024 Alocado,        
               sum(tf_fs.bytes_used) / 1024 / 1024 Usado, sum(tf_fs.bytes_free) / 1024 / 1024 Livre,
               sum(decode(tf.autoextensible, 'YES', decode(sign(tf.maxbytes - tf.bytes), 1, tf.maxbytes - tf.bytes, 0),
                          0)) / 1024 / 1024 Expansivel, sum(tf.bytes) / 1024 / 1024 Total
          from dba_temp_files tf, V$TEMP_SPACE_HEADER tf_fs
         where tf.tablespace_name = tf_fs.tablespace_name and tf.file_id = tf_fs.file_id
         group by tf.tablespace_name) ar, (select df.tablespace_name tablespace, 'ILIMITADO' limite
          from dba_data_files df
         where df.maxbytes / 1024 / 1024 / 1024 > 30
           and df.autoextensible = 'YES'
         group by df.tablespace_name
        union
        select tf.tablespace_name tablespace, 'ILIMITADO' limite
          from dba_temp_files tf
         where tf.maxbytes / 1024 / 1024 / 1024 > 30
           and tf.autoextensible = 'YES'
         group by tf.tablespace_name) cresc
 where cresc.tablespace(+) = t.tablespace_name
   and ar.tablespace(+) = t.tablespace_name
 order by 7;

- PARÂMETROS DOS OWNERS;
set pages 2000
set lines 300
col owner for a20
SELECT owner,tablespace_name, round(Sum(bytes)/1024/1024,0)  AS total_size_mb
FROM dba_segments
WHERE owner like upper('%')
GROUP BY owner,tablespace_name
order by total_size_mb desc,owner,tablespace_name
/

- PARÂMETROS DA INSTÂNCIA;
col name FORMAT A35
col value format a40
select name,value from v$parameter where isdefault='FALSE';

- HITS DE MEMÓRIA DO ORACLE;
col "Buffer Hit Ratio (95%-100%)" format a27;
col "Dict Hit Ratio (85%-100%)" format a25;
col "Library Hit Ratio (95%-100%)" format a28;
col "RedoLog Wait (95%-100%)" format a23;
col "PGA Hit Ratio (95%-100%)" format a24;
with
a as
(
  select to_char(round(((1-(sum(decode(name,'physical reads',value,0))/(sum(decode(name,'db block gets',value,0))+(sum(decode(name,'consistent gets',value,0))))))*100),4),'99.99') || '%' as "Buffer Hit Ratio (95%-100%)"
  from v$sysstat
),
b as
(
  select to_char(round(((1-(sum(getmisses)/sum(gets)))*100),4),'999.99') || '%' as "Dict Hit Ratio (85%-100%)"
  from v$rowcache
),
c as
(
  select to_char(round(100-((((sum(reloads)/sum(pins))))),4),'999.99') || '%' as "Library Hit Ratio (95%-100%)"
  from v$librarycache
),
d as
(
  select to_char(round((100-(100*sum(decode(name,'redo log space requests',value,0))/sum(decode(name,'redo entries',value,0)))),4),'999.999') || '%' as "RedoLog Wait (95%-100%)"
  from sys.v_$sysstat
),
e as
(
  select to_char(round(value,4),'999.99') ||'%' "PGA Hit Ratio (95%-100%)"
  from sys.v_$pgastat
  where name = 'cache hit percentage'
)
select * from a,b,c,d,e; 

ADVISORS
column "Executions" format 999,999,999,990
column "Cache Misses Executing" format 999,999,990
column "Data Dictionary Gets" format 999,999,999,999,999
column "Get Misses" format 999,999,999,999
select sum(pins) "Executions",
sum(reloads) "Cache Misses Executing",
(sum(reloads)/sum(pins)*100) "%Ratio (STAY UNDER 1%)"
from v$librarycache;

column NAMESPACE for a30
select
        NAMESPACE,
        GETS,
        GETHITS,
        round(GETHITRATIO*100,2) gethit_ratio,
        PINS,
        PINHITS,
        round(PINHITRATIO*100,2) pinhit_ratio,
        RELOADS,
        INVALIDATIONS
from    v$librarycache;

- Data Dictionary Gets
select sum(gets) "Data Dictionary Gets",
sum(getmisses) "Get Misses",
100*(sum(getmisses)/sum(gets)) "%Ratio (STAY UNDER 12%)"
from v$rowcache;

- TABLE SCAN
column parameter format a21
column pct_succ_gets format 999.9
column updates format 999,999,999
SELECT
        parameter
        , sum(gets)
        , sum(getmisses)
        , 100*sum(gets - getmisses) / sum(gets) pct_succ_gets
        , sum(modifications) updates
FROM V$ROWCACHE
        WHERE gets > 0
GROUP BY rollup(parameter)
/
- Database Misses
column parameter format a21
column pct_succ_gets format 999.9
column updates format 999,999,999
SELECT
        parameter
        , sum(gets)
        , sum(getmisses)
        , sum(modifications) updates
        , to_char(100*sum(gets - getmisses) / sum(gets),'999D99') pct_succ_gets
FROM V$ROWCACHE
        WHERE gets > 0
GROUP BY rollup(parameter)
        HAVING 100*sum(gets - getmisses) / sum(gets) <= 60;

- BLOCOS BUFFER CACHE
set lines 155
set pagesize 400

SELECT (1 - (Sum(misses) / Sum(gets))) * 100 "LATCH HIT (95%-100%)" FROM v$latch;

column "col1"  format a25               heading "BLOCOS BUFFER CACHE"
column "col2"  format 99,999,999,990    heading "Quantidade"
column "col3"  format 99,999,999,990    heading "TOTAL"

select
        decode(state,   0,'Nao Usado',
                        1,'Lido e Modificado',
                        2,'Lido e nao Modificado',
                        3,'Lido Correntemente',
                        'Outros')                       "col1",
        count(*)                                        "col2"
from
        x$bh
group by
        decode(state, 0,'Nao Usado',
                        1,'Lido e Modificado',
                        2,'Lido e nao Modificado',
                        3,'Lido Correntemente',
                        'Outros');

- MEMORIA ORACLE
declare
        object_mem number;
        shared_sql number;
        cursor_mem number;
        mts_mem number;
        used_pool_size number;
        free_mem number;
        pool_size varchar2(512);
begin

select sum(sharable_mem) into object_mem from v$db_object_cache;
select sum(250*users_opening) into cursor_mem from v$sqlarea;

select sum(value) into mts_mem from v$sesstat s, v$statname n
       where s.statistic#=n.statistic#
       and n.name='session uga memory max';

select bytes into free_mem from v$sgastat
        where name = 'free memory' and pool='shared pool';
used_pool_size := round(1.3*(object_mem+cursor_mem));
select value into pool_size from v$parameter where name='shared_pool_size';
  if pool_size > 0 then
        dbms_output.put_line ('Gerenciamento de memória Manual.');
        dbms_output.put_line ('Object mem:                            '||to_char (object_mem) || ' bytes');
        dbms_output.put_line ('Cursors:                            '||to_char (cursor_mem) || ' bytes');
        dbms_output.put_line ('Free memory:                            '||to_char (free_mem) || ' bytes ' ||
        '('|| to_char(round(free_mem/1024/1024,2)) || 'MB)');
        dbms_output.put_line ('Shared pool utilization (total):                            '||
        to_char(used_pool_size) || ' bytes ' || '(' ||
        to_char(round(used_pool_size/1024/1024,2)) || 'MB)');
        dbms_output.put_line ('Shared pool allocation (actual):                            '|| pool_size
        ||' bytes ' || '(' || to_char(round(pool_size/1024/1024,2)) || 'MB)');
        dbms_output.put_line ('Percentage Utilized:                            '||to_char
        (round(used_pool_size/pool_size*100)) || '%');
   else
        dbms_output.put_line ('Gerenciamento de memória Automático.');
        dbms_output.put_line ('Object mem:                             '||to_char (object_mem) || ' bytes');
        dbms_output.put_line ('Cursors:                                '||to_char (cursor_mem) || ' bytes');
        dbms_output.put_line ('Free memory:                            '||to_char (free_mem) || ' bytes ' ||
        '('|| to_char(round(free_mem/1024/1024,2)) || 'MB)');
   end if;
end;
/
set serveroutput on
/

- MEMORIA PGA
SELECT 
 round(PGA_TARGET_FOR_ESTIMATE/1024/1024) 
 target_mb, 
 ESTD_PGA_CACHE_HIT_PERCENTAGE 
 cache_hit_perc, 
 ESTD_OVERALLOC_COUNT
 FROM  
 V$PGA_TARGET_ADVICE;
Explicação: 
- O Campo TARGET_MB informa o valor da PGA;
- O Campo CACHE_HIT_PERC informa o percentual de utilização do cache da PGA;
- O Campo ESTD_OVERALLOC_COUNT informa se ocorreu "estouro" da PGA configurada atualmente;

Para validarmos se precisamos ou não aumentar a PGA, devemos fazer a seguinte comparação:
1) Da lista TRAGET_MB informada, qual o valor de PGA configurada para nosso ambiente?
2) Na coluna ESTD_OVERALLOC_COUNT correspondente ao nosso TRAGET_MB o valor é maior que zero?
Se a resposta para o item 2 acima for sim, devemos avaliar a possibilidade de aumentar a PGA.

- MEMORIA SGA
select component, oper_type, oper_mode, 
 parameter, initial_size, final_size,  
 to_char(start_time,'dd/mm/yyyy  hh24:mi:ss') start_time, 
 to_char(end_time,'dd/mm/yyyy  hh24:mi:ss') end_time  from v$memory_resize_ops;

- TOP EVENTOS ESPERA
SELECT w.event,
count(*) "Tot",
sum(w.seconds_in_wait)/count(*) Wait_time
FROM v$session s, v$session_wait w
WHERE s.sid = w.sid
AND W.event not in ('Null event',
'PX Deq: Execution Msg',
'PX Deq: Table Q Normal',
'PX Idle Wait',
-- 'SQL*Net message from client',
-- 'SQL*Net message to client',
-- 'SQL*Net more data from client',
'client message',
'dispatcher timer',
'gcs for action',
'gcs remote message',
'ges remote message',
'i/o slave wait',
'jobq slave wait',
'lock manager wait for remote message',
'null event',
'parallel query dequeue',
'pipe get',
'pmon timer',
'queue messages',
'rdbms ipc message',
'slave wait',
'smon timer',
'virtual circuit status',
'wakeup time manager')
GROUP BY w.event
